version: '3.9'

services:
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend
    env_file:
      - .env 

  db: 
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: celery_db
      POSTGRES_USER: celery_user
      POSTGRES_PASSWORD: celery_pass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U celery_user -d celery_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    env_file:
      - .env 

  api:
    build:
      context: ./api
    container_name: api_container
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
    env_file:
      - .env 

  worker:
    build:
      context: ./worker
    container_name: celery_worker
    command: celery -A tasks worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
    env_file:
      - .env 

  nginx:
    image: nginx:latest 
    container_name: nginx_container 
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
      - grafana
      - prometheus
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest 
    container_name: prometheus 
    volumes: 
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana 
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin 
      GF_SECURITY_ADMIN_PASSWORD: admin 
    networks:
      - backend

volumes:
  pgdata:
  grafana-storage:

networks:
  backend:
    driver: bridge
    name: ai_platform_network